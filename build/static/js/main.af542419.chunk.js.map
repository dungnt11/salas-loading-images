{"version":3,"sources":["components/header/index.js","components/header/Header.js","components/button/index.js","components/button/button.js","constants/index.js","actions/index.js","components/imageGrid/ImagesGrid.js","components/imageGrid/index.js","reducers/loadingReducer.js","reducers/currentPage.js","reducers/isLoading.js","reducers/index.js","api/index.js","saga/loadImages.js","saga/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Button","_ref","children","loading","props","Object","objectWithoutProperties","assign","disabled","className","IMAGES","LOAD","LOAD_SUCCESS","LOAD_FAIL","FETCH","getImagesError","err","type","getImagesSuccess","data","ImagesGrid","this","fetchApi","_this$props","statusLoad","images","map","image","key","id","concat","Math","ceil","height","width","src","urls","small","alt","user","username","components_button","onClick","Component","connect","state","isLoading","dispatch","myReducer","arguments","length","undefined","action","toConsumableArray","currentPage","rootReducers","combineReducers","loadingReducer","fetchImages","asyncToGenerator","regenerator_default","mark","_callee","page","res","wrap","_context","prev","next","fetch","sent","json","status","Error","errors","abrupt","stop","_x","apply","getApi","watchFetchApi","getCurrentPage","imgs","select","call","put","t0","_marked","_context2","takeLatest","_marked2","rootsaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","run","rootSaga","configStore","App","es","react","components_header","imageGrid","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af542419.chunk.js","sourcesContent":["import Header from \"./Header\";\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst header =  () => <header>What the Splash!</header>\r\nexport default header;","import Button from \"./button\";\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nlet Button = ({ children, loading, ...props }) => {\r\n  return (\r\n    <button disabled={loading} className=\"button\" {...props}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","const IMAGES = {\r\n  LOAD: \"IMAGES_LOAD\",\r\n  LOAD_SUCCESS: \"IMAGES_LOAD_SUCCESS\",\r\n  LOAD_FAIL: \"IMAGES_LOAD_FAIL\", // 3 actions is status images\r\n  FETCH: \"IMAGES_FETCH\" // fetch api\r\n};\r\n\r\nexport { IMAGES };\r\n","import { IMAGES } from \"../constants\";\r\n\r\nconst getImagesError = err => ({\r\n  type: IMAGES.LOAD_FAIL,\r\n  err\r\n});\r\n\r\nconst getImagesSuccess = data => ({\r\n  type: IMAGES.LOAD_SUCCESS,\r\n  data\r\n});\r\n\r\nconst fetchApi = () => ({\r\n  type: IMAGES.FETCH\r\n});\r\n\r\nexport { getImagesError, getImagesSuccess, fetchApi };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../button\";\r\nimport \"./style.css\";\r\n// import action phuc vu viec load api\r\nimport { fetchApi } from \"../../actions\";\r\n\r\nclass ImagesGrid extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchApi();\r\n  }\r\n\r\n  render() {\r\n    const { fetchApi, statusLoad, images } = this.props; // status la trang thai loading\r\n    return (\r\n      <div className=\"content\">\r\n        <section className=\"grid\">\r\n          {images.map(image => (\r\n            <div\r\n              key={image.id}\r\n              className={`item item-${Math.ceil(image.height / image.width)}`}\r\n            >\r\n              {/* <Stats stats={imageStats[image.id]} /> */}\r\n              <img src={image.urls.small} alt={image.user.username} />\r\n            </div>\r\n          ))}\r\n        </section>\r\n        <Button onClick={() => !statusLoad && fetchApi()} loading={statusLoad}>\r\n          Loadmore\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    statusLoad: state.isLoading,\r\n    images: state.data\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchApi: () => dispatch(fetchApi())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ImagesGrid);\r\n","import ImagesGrid from \"./ImagesGrid\";\r\n\r\nexport default ImagesGrid;\r\n","import { IMAGES } from \"../constants\";\r\n\r\nlet myReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case IMAGES.LOAD_SUCCESS:\r\n      return [...state, ...action.data];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default myReducer;\r\n","import { IMAGES } from \"../constants\";\r\n\r\nlet currentPage = (state = 1, action) => {\r\n  if (action.type === IMAGES.LOAD_SUCCESS) {\r\n    return state += 1;\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default currentPage;\r\n","import { IMAGES } from \"../constants\";\r\n\r\nconst isLoading = (state = true, action) => {\r\n  switch (action.type) {\r\n    case IMAGES.LOAD_SUCCESS:\r\n      return false;\r\n    default:\r\n      return true;\r\n  }\r\n}; // load thanh cong return true\r\n\r\nexport default isLoading;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport loadingReducer from \"./loadingReducer\";\r\nimport currentPage from \"./currentPage\";\r\nimport isLoading from \"./isLoading\";\r\n\r\nconst rootReducers = combineReducers({\r\n  data: loadingReducer,\r\n  isLoading,\r\n  currentPage\r\n});\r\n\r\nexport default rootReducers;\r\n","const KEY = `?client_id=5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02`;\r\nconst URL = `https://api.unsplash.com/photos/`;\r\n\r\nlet fetchImages = async page => {\r\n  // lay anh tu api per_page = anh / 1 page page = page hien tai\r\n  const res = await fetch(`${URL}${KEY}&per_page=3&page=${page}`);\r\n  const data = await res.json();\r\n  if (res.status >= 400) {\r\n    throw new Error(res.errors);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport { fetchImages };\r\n","import { put, call, select, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport { fetchImages } from \"../api\";\r\nimport { getImagesError, getImagesSuccess } from \"../actions\";\r\nimport { IMAGES } from \"../constants\";\r\nexport const getCurrentPage = state => state.currentPage;\r\n\r\nexport function* getApi() {\r\n  try {\r\n    let currentPage = yield select(getCurrentPage);\r\n    let imgs = yield call(fetchImages, currentPage);\r\n    yield put(getImagesSuccess(imgs));\r\n  } catch (err) {\r\n    yield put(getImagesError(err));\r\n  }\r\n} // get api from api/index.js\r\n\r\nexport default function* watchFetchApi() {\r\n  yield takeLatest(IMAGES.FETCH, getApi);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport watchFetchApi from \"./loadImages\";\r\n\r\nlet rootsaga = function*() {\r\n  yield all([watchFetchApi()]);\r\n};\r\n\r\nexport default rootsaga;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducers from \"../reducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../saga\";\r\n// goi saga midderware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst configStore = () => {\r\n  const store = createStore(\r\n    rootReducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n      ? compose(\r\n          applyMiddleware(sagaMiddleware),\r\n          window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n            window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n      : applyMiddleware(sagaMiddleware)\r\n  );\r\n  sagaMiddleware.run(rootSaga)\r\n  return store;\r\n};\r\n\r\nexport default configStore;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport Header from \"./components/header\";\r\nimport ImagesGrid from \"./components/imageGrid\";\r\nimport configStore from './store';\r\n\r\nconst store = configStore()\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={ store }>\r\n        <Fragment>\r\n          <Header />\r\n          <ImagesGrid />\r\n        </Fragment>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}